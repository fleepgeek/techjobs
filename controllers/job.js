// const Sequelize = require("sequelize");
const { validationResult } = require("express-validator/check");
const Job = require("../models/job");
const User = require("../models/user");

/**
 * Gets all Jobs
 */
exports.getJobs = (req, res, next) => {
	Job.findAll({
		include: [
			{
				all: true,
				attributes: { exclude: ["password", "createdAt", "updatedAt"] }
			}
		]
	})
		.then(jobs => {
			res.json(jobs);
		})
		.catch(err => next(err));
};

/**
 * Gets a Single Job by its id
 */
exports.getJobById = (req, res) => {
	const jobId = req.params.id;
	Job.findByPk(jobId)
		.then(job => {
			if (!job) {
				const error = new Error("Job not found");
				error.statusCode = 404;
				next(error);
			} else {
				res.json(job);
			}
		})
		.catch(err => next(err));
};

/**
 * Posts a Job
 */
exports.postJob = (req, res) => {
	const errors = validationResult(req);
	if (!errors.isEmpty()) {
		return res.status(422).json({ errors: errors.array() });
	}
	const { title } = req.body;
	const userId = req.userId;
	console.log("Req userId:" + userId);
	console.log("Header" + req.header("x-access-token"));

	// Creating a Job using seqelize's magic reverse relationship
	// Here we're creating a job based on a user object
	// In order words, we create a job from a user
	User.findByPk(userId)
		.then(user => {
			// createJob is an autogenerated method from sequlize
			// we don't need to pass the userId field
			user
				.createJob({
					title
				})
				.then(job => {
					res.json(job);
				});
		})
		.catch(err => next(err));

	// Old way to create a job
	// Job.create({
	// 	title,
	// 	userId
	// })
	// 	.then(job => {
	// 		res.json(job);
	// 	})
	// 	.catch(err => res.json({ message: "Job creation Failed", error: err }));
};

/**
 * Deletes a Job (Can only be deleted by the user that created the job)
 */
exports.deleteJob = (req, res) => {
	const jobId = req.params.id;
	Job.findByPk(jobId)
		.then(job => {
			// Checks to see if the person trying to delete the job is the creator
			if (job.userId !== req.userId) {
				const error = new Error("You can't delete a job you did not create");
				error.statusCode = 401;
				next(error);
			} else {
				job
					.destroy()
					.then(() => {
						res.json({ success: true });
					})
					.catch(err => next(err));
			}
		})
		.catch(err => next(err));
};

/**
 * Gets all job created by a user
 */
exports.getJobsByUser = (req, res) => {
	const id = req.params.id;
	User.findByPk(id)
		.then(user => {
			// using sequelize's magic reverse relationship method
			user
				.getJobs()
				.then(jobs => res.json(jobs))
				.catch(err => next(err));
		})
		.catch(err => next(err));
};
